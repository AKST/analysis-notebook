/**
 * @import { E, ElAttributes } from '../../render_app/type.ts';
 * @import { Helper, TemplateHelper } from '../../render_app/helper/type.ts';
 */

import { frag } from '../../render_app/helper/typography.js';
import { makeHelper, makeTemplateHelper } from '../../render_app/helper/util.js';
import { mathml } from '../../render_app/helper/mathml_2.js';

const {
  msup,
  mspace, mrow, mn, mo, mi,
  munderover, munder, mover,
  mtext, mtd, mtr, mtable,
} = mathml;

export const parensA = makeHelper((attrs, body) => mrow(attrs)(mo`(`, ...body, mo`)`));
export const parensB = makeHelper((attrs, body) => mrow(attrs)(mo`[`, ...body, mo`]`));
export const parensC = makeHelper((attrs, body) => mrow(attrs)(mo`{`, ...body, mo`}`));

/**
 * @param {E.Item[]} items
 * @param {E.Item[]} sep
 * @returns {E.Item[]}
 */
const seperateItems = (items, sep) => [
  items[0],
  ...items.slice(1).flatMap(item => [
    ...sep,
    item,
  ]),
];

export const set = makeHelper((attrs, body) => parensC(attrs)(
  ...seperateItems(body, [mo`,`, mspace(4)]),
));


export const annotationUnder = makeHelper(({
  label,
  labelSize,
  marginTop,
  ...attr
}, body) => {
  let style = '';
  if (labelSize != null) style += `; font-size: ${labelSize}px`;
  if (marginTop != null) style += `; margin-top: ${marginTop}px`;
  return munder(attr)(mrow(...body), munder(mo`‚èü`, mrow.attr({ style })(label)))
}, /** @type {{
  label: E.Item,
  labelSize?: number,
  marginTop?: number,
}} */ ({ label: mrow() }));

export const annotationOver = makeHelper(({ label, labelSize, ...attr }, body) => {
  const overAttr = labelSize == null ? ({}) : ({ style: `font-size: ${labelSize}px` });
  return mover(attr)(mrow(...body), mover(mo`‚èû`, mrow.attr(overAttr)(label)))
}, /** @type {{
  label: E.Item,
  labelSize?: number
}} */ ({ label: mrow() }));

/**
 * Similar to mtable components except columnalign is propagated
 * and rows are automatically handled.
 *
 * @type {Helper<undefined, E.Item[][]>}
 */
export const table = makeHelper(({ columnalign = '', ...attrs }, rows) => (
  mtable(attrs)(...rows.map(row => {
    const split = columnalign != null
      ? columnalign.split(' ')
      : Array(row.length).fill(undefined);

    const cell = row.map((col, idx) => mtd({ columnalign: split[idx] })(col));
    return mtr({ columnalign })(...cell);
  }))
));

/***
 * Stacks rows in a table
 */
export const rows = makeHelper((attr, body) => (
  table(attr)(...body.map(row => [mtd(row)]))
));

/**
 * Stacks rows in a table
 */
export const abs = makeHelper((attr, body) => (
  mrow(attr)(mo`|`, ...body, mo`|`)
));

/**
 * Stacks rows in a table
 * @type {Helper<undefined, [E.Item, E.Item]>}
 */
export const index = makeHelper((attr, [body, index]) => mrow(attr)(
  mrow(body),
  mrow(mo`[`, index, mo`]`),
));


/**
 * Stacks rows in a table
 *
 * @type {Helper<{ max: E.Item, inc: E.Item }>}
 */
export const sum = makeHelper(({ max, inc, ...attr }, items) => (
  mrow(attr)(
    munderover(mi`‚àë`, inc, max),
    mspace(4),
    mrow(...items),
  )
), ({ max: mrow(), inc: mrow() }));


/**
 * @type {Helper<undefined, E.Item[][]>}
 */
export const matrix = makeHelper((attrs, rows) => (
  mrow(attrs)(
    mo`[`,
    mtable(...rows.map(row => (
      mtr(...row.map(col => mathml.mtd(col)))
    ))),
    mo`]`,
  )
));

/**
 * @type {Helper<undefined, { cond?: E.Item, then: E.Item }[]>}
 */
export const piecewise = makeHelper((attrs, conds) => (
  mrow(attrs)(
    mo`{`,
    mtable(...conds.map(({ cond, then }) =>
      mtr(
        mtd(then),
        mtd(cond == null ? mrow() : mtext`if`),
        mtd(cond == null ? mtext`otherwise` : cond),
      ),
    )),
  )
));

/**
 * @type {Helper<undefined, [string]>}
 */
export const iv = makeHelper((attr, [i]) => (
  mi(attr).of(`${i} ‚Éó`.replace(/\s+/g, ''))
));

/**
 * @type {Helper<{ fn: E.Item }>}
 */
export const call = makeHelper(({ fn, ...attr }, items) => (
  mrow(attr)(
    fn,
    mspace(2),
    mrow(
      mo`(`,
      ...seperateItems(items, [
        mo`,`,
        mspace(4),
      ]),
      mo`)`,
    ),
  )
), { fn: mrow() });

/** @param {...E.Item} body */
export const inv = (...body) => {
  if (body.length === 0) throw new Error();
  const item = body.length > 1 ? parensA(...body) : body[0];
  return msup(item, mrow(mo`-`, mn(1)));
};

export const multiscripts =
  makeHelper(({
    sup: [tl, tr] = [undefined, undefined],
    sub: [bl, br] = [undefined, undefined],
    ...attr
  }, body) => {
    const base = body.length > 1 ? parensA(...body) : body[0];
    return mathml.mmultiscripts(attr)(
      base,
      br ?? mrow(),
      tr ?? mrow(),
      mathml.mprescripts(),
      bl ?? mrow(),
      tl ?? mrow(),
    );
  }, /**
      * @type {{
      *   sup?: [E.Item | undefined, E.Item | undefined] | undefined,
      *   sub?: [E.Item | undefined, E.Item | undefined] | undefined,
      * }}
      */ ({ sup: undefined, sub: undefined }));

export const SPECIAL = {
  because: mathml.mo`‚àµ`,
  therefore: mathml.mo`‚à¥`,
  ellipse: {
    h: mathml.mo`‚Ä¶`,
    h2: mathml.mo`‚ãØ`,
    v: mathml.mo`‚ãÆ`,
    d1: mathml.mo`‚ã±`,
  },
  operation: {
    and: mathml.mo`‚àß`,
    or: mathml.mo`‚à®`,
    not: mathml.mo`¬¨`,
    dot: mathml.mo`¬∑`,
    mul: mathml.mo`‚®â`,
    divide: mathml.mo`√∑`,
    integral: mathml.mo`‚à´`,
    plusMinus: mathml.mo`¬±`,
  },
  sets: {
    complex: mathml.mi`‚ÑÇ`,
    int: mathml.mi`‚Ñ§`,
    nat: mathml.mi`‚Ñï`,
    rational: mathml.mi`‚Ñö`,
    real: mathml.mi`‚Ñù`,
  },
  rel: {
    id: mathml.mo`‚â°`,
    neq: mathml.mo`‚â†`,
    lteq: mathml.mo`‚â§`,
    gteq: mathml.mo`‚â•`,
    imply: mathml.mo`‚áí`,
    aprox: mathml.mo`‚âà`,
    equiv: mathml.mo`~`,
    exists: mathml.mo`‚àà`,
    subset: mathml.mo`‚äÇ`,
    supset: mathml.mo`‚äÉ`,
  },
  cursive: {
    F: mathml.mi`‚Ñ±`,
  },
  greek: {
    alpha: mathml.mi`ùõº`,
    Alpha: mathml.mi`ùõ¢`,
    beta: mathml.mi`ùõΩ`,
    Beta: mathml.mi`ùõ£`,
    delta: mathml.mi`ùõø`,
    Delta: mathml.mi`ùõ•`,
    gamma: mathml.mi`ùõæ`,
    Gamma: mathml.mi`ùõ§`,
    eplison: mathml.mi`ùúÄ`,
    Eplison: mathml.mi`ùõ¶`,
    zeta: mathml.mi`ùúÅ`,
    Zeta: mathml.mi`ùõß`,
    eta: mathml.mi`ùúÇ`,
    Eta: mathml.mi`ùõ®`,
    theta: mathml.mi`ùúÉ`,
    Theta: mathml.mi`ùõ©`,
    iota: mathml.mi`ùúÑ`,
    Iota: mathml.mi`ùõ™`,
    kappa: mathml.mi`ùúÖ`,
    Kappa: mathml.mi`ùõ´`,
    lambda: mathml.mi`ùõ¨`,
    Lambda: mathml.mi`ùúÜ`,
    mu: mathml.mi`ùúá`,
    Mu: mathml.mi`ùõ≠`,
    nu: mathml.mi`ùúà`,
    Nu: mathml.mi`ùõÆ`,
    xi: mathml.mi`ùúâ`,
    Xi: mathml.mi`ùõØ`,
    omicron: mathml.mi`ùúä`,
    Omicron: mathml.mi`ùõ∞`,
    pi: mathml.mi`ùúã`,
    Pi: mathml.mi`ùõ±`,
    rho: mathml.mi`ùúå`,
    Rho: mathml.mi`ùúå`,
    sigma: mathml.mi`ùúé`,
    Sigma: mathml.mi`ùõ¥`,
    tau: mathml.mi`ùúè`,
    Tau: mathml.mi`ùõµ`,
    upsilon: mathml.mi`ùúê`,
    Upsilon: mathml.mi`ùõ∂`,
    phi: mathml.mi`ùúô`,
    Phi: mathml.mi`ùõ∑`,
    chi: mathml.mi`ùùå`,
    Chi: mathml.mi`ùõ∏`,
    psi: mathml.mi`ùúì`,
    Psi: mathml.mi`ùõπ`,
    omega: mathml.mi`ùúî`,
    Omega: mathml.mi`ùõ∫`,
    circumflex: {
      beta: mathml.mi`ùõΩÃÇ`,
      gamma: mathml.mi`ùõæÃÇ`,
      mu: mathml.mi`ùúáÃÇ`,
      rho: mathml.mi`ùúåÃÇ`,
      sigma: mathml.mi`ùúéÃÇ`,
    },
  },
}


/**
 * @param {E.Item} o
 * @param {number | string} [space]
 * @returns {(...items: E.Item[]) => E.Item}
 */
const makeOperator = (o, space=4) => (...items) => mrow(
  ...seperateItems(items, [mspace(space), o, mspace(space)])
);

/**
 * Wraps something in normal parens ().
 *
 * @param {E.Item} o
 * @param {number | string} [space]
 * @returns {(...items: E.Item[]) => E.Item}
 */
const makeOperatorPA = (o, space=4) => (...items) => (
  parensA(...seperateItems(items, [mspace(space), o, mspace(space)]))
);

/**
 * Wraps something in square parens [].
 *
 * @param {E.Item} o
 * @param {number | string} [space]
 * @returns {(...items: E.Item[]) => E.Item}
 */
const makeOperatorPB = (o, space='0.5em') => (...items) => (
  parensB(...seperateItems(items, [mspace(space), o, mspace(space)]))
);

export const gt = makeOperator(mo`>`);
export const lt = makeOperator(mo`<`);
export const eq = makeOperator(mo`=`);
export const eqId = makeOperator(SPECIAL.rel.id);
export const cond = makeOperator(mo`|`, 2);
export const imply = makeOperator(SPECIAL.rel.imply);
export const aprox = makeOperator(SPECIAL.rel.aprox);
export const addMinus = makeOperator(mo`¬±`);
export const add = makeOperator(mo`+`);
export const addPA = makeOperatorPA(mo`+`);
export const addPB = makeOperatorPB(mo`+`);
export const mul = makeOperator(SPECIAL.operation.dot, 1);
export const mulPA = makeOperatorPA(SPECIAL.operation.dot, 1);
export const mulPB = makeOperatorPB(SPECIAL.operation.dot, 1);
export const mul0 = makeOperator(mo.of('\u{2062}'), 1);
export const mul0PA = makeOperatorPA(mo.of('\u{2062}'), 1);
export const mul0PB = makeOperatorPB(mo.of('\u{2062}'), 1);
export const minus = makeOperator(mo`-`);
export const minusPA = makeOperatorPA(mo`-`);
export const minusPB = makeOperatorPB(mo`-`);
export const div = makeOperator(SPECIAL.operation.divide);
export const divPA = makeOperatorPA(SPECIAL.operation.divide);
export const divPB = makeOperatorPB(SPECIAL.operation.divide);
