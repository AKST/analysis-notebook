" Local vim config for complex-geo project
" Custom ALE linter using typecheck.sh for inline errors

" Custom callback to parse tsc output
function! s:ParseTscOutput(buffer, lines) abort
  let l:output = []
  let l:pattern = '\v^(.+)\((\d+),(\d+)\): (error|warning) TS(\d+): (.*)$'

  for l:line in a:lines
    let l:match = matchlist(l:line, l:pattern)
    if !empty(l:match)
      call add(l:output, {
      \   'filename': l:match[1],
      \   'lnum': str2nr(l:match[2]),
      \   'col': str2nr(l:match[3]),
      \   'type': l:match[4] ==# 'error' ? 'E' : 'W',
      \   'text': 'TS' . l:match[5] . ': ' . l:match[6],
      \})
    endif
  endfor

  return l:output
endfunction

function! Disabled()
  " Define custom linter for JavaScript
  call ale#linter#Define('javascript', {
  \   'name': 'tsc_project',
  \   'executable': 'bash',
  \   'command': './scripts/typecheck.sh',
  \   'callback': function('s:ParseTscOutput'),
  \   'output_stream': 'both',
  \})

  " Define custom linter for TypeScript
  call ale#linter#Define('typescript', {
  \   'name': 'tsc_project',
  \   'executable': 'bash',
  \   'command': './scripts/typecheck.sh',
  \   'callback': function('s:ParseTscOutput'),
  \   'output_stream': 'both',
  \})

  " Use only our custom linter
  let g:ale_linters = {
  \   'javascript': ['tsc_project'],
  \   'typescript': ['tsc_project'],
  \}

  " Also keep makeprg for manual checks
  augroup TypeCheckSetup
    autocmd!
    autocmd FileType javascript,typescript setlocal makeprg=./scripts/typecheck.sh\ %
    autocmd FileType javascript,typescript setlocal errorformat=%f(%l\\,%c):\ error\ TS%n:\ %m,%f(%l\\,%c):\ warning\ TS%n:\ %m
  augroup END

  echo "Loaded project vim config (ALE + typecheck.sh)"
endfunction

echo Disabled()
